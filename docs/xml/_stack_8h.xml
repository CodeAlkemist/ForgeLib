<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_stack_8h" kind="file" language="C++">
    <compoundname>Stack.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_config_8h" local="yes">Config.h</includes>
    <includedby refid="lib_defines_8h" local="yes">src/libDefines.h</includedby>
    <incdepgraph>
      <node id="16">
        <label>Config.h</label>
        <link refid="_config_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>Consts.h</label>
        <link refid="_consts_8h"/>
      </node>
      <node id="14">
        <label>src/include/Stack.h</label>
        <link refid="_stack_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="19">
        <label>src/libDefines.h</label>
        <link refid="lib_defines_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>src/to_rpn.c</label>
        <link refid="to__rpn_8c"/>
      </node>
      <node id="18">
        <label>src/include/Stack.h</label>
        <link refid="_stack_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_stack" prot="public">Stack</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_stack_8h_1abb7898de38e2bf26ab4bb9fa1872e63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stack_init</definition>
        <argsstring>(Stack *stack)</argsstring>
        <name>stack_init</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialise the stack </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="21" column="1" bodyfile="src/include/Stack.h" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1afc04d6c48f275815a5a248a37b9f30bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stack_free</definition>
        <argsstring>(Stack *stack)</argsstring>
        <name>stack_free</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free the memory allocated to the stack passed as argument </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="32" column="1" bodyfile="src/include/Stack.h" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1ac726bfaf88914a92a2a2232a855d5641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_consts_8h_1af6a258d8f3ee5206d682d799316314b1" kindref="member">bool</ref></type>
        <definition>bool stack_resize</definition>
        <argsstring>(Stack *stack, int qty)</argsstring>
        <name>stack_resize</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>qty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increase capacity by a given number defaults to 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="38" column="1" bodyfile="src/include/Stack.h" bodystart="38" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1a9b04b30c135696d611c05092a429e961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stack_get_arbitrary</definition>
        <argsstring>(Stack *stack, int index)</argsstring>
        <name>stack_get_arbitrary</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a value at an arbitrary index of the stack this is not part of the general concept of a stack and this function will be slower to run than pop </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="51" column="1" bodyfile="src/include/Stack.h" bodystart="51" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1ae041e1222c96f70d7b1a4528c3b3bf2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stack_push</definition>
        <argsstring>(Stack *stack, int data)</argsstring>
        <name>stack_push</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push to the stack </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="60" column="1" bodyfile="src/include/Stack.h" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1a86914bce7c52639297c92a086ba87581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stack_pop</definition>
        <argsstring>(Stack *stack)</argsstring>
        <name>stack_pop</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pop from the stack </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="69" column="1" bodyfile="src/include/Stack.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1ac5b24a79f9821527a6673b7582ae838b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stack_check</definition>
        <argsstring>(Stack *stack)</argsstring>
        <name>stack_check</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the topmost item on the stack </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="77" column="1" bodyfile="src/include/Stack.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1a1f99bec6acb65ce01f2079dc1ea2c117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getsizeof_stack</definition>
        <argsstring>(Stack *stack)</argsstring>
        <name>getsizeof_stack</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the size of the stack </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="82" column="1" bodyfile="src/include/Stack.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="_stack_8h_1ac631668285b65b180672342a757df994" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stack_merge</definition>
        <argsstring>(Stack *stack1, Stack *stack2)</argsstring>
        <name>stack_merge</name>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack1</declname>
        </param>
        <param>
          <type><ref refid="struct_stack" kindref="compound">Stack</ref> *</type>
          <declname>stack2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Merges stack1 into stack2 Returns: nothing the resulting stack is stack2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/include/Stack.h" line="91" column="1" bodyfile="src/include/Stack.h" bodystart="91" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_config_8h" kindref="compound">Config.h</ref>&quot;</highlight></codeline>
<codeline lineno="12"><highlight class="comment">/*<sp/>Define<sp/>the<sp/>type*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="struct_stack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15" refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="16" refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="17" refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<ref refid="struct_stack" kindref="compound">Stack</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="_stack_8h_1abb7898de38e2bf26ab4bb9fa1872e63d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1abb7898de38e2bf26ab4bb9fa1872e63d" kindref="member">stack_init</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>size<sp/>and<sp/>capacity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref><sp/>=<sp/><ref refid="_config_8h_1a3afff225364d8bab65b41401048edeb3" kindref="member">STACK_INIT_SIZE</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref><sp/>=<sp/>malloc(<ref refid="_config_8h_1a077ed361b17b3331f4506422a383aaae" kindref="member">SIZE_OF_INT</ref><sp/>*<sp/>stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="_stack_8h_1afc04d6c48f275815a5a248a37b9f30bc" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1afc04d6c48f275815a5a248a37b9f30bc" kindref="member">stack_free</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack)</highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>free(stack);</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="_stack_8h_1ac726bfaf88914a92a2a2232a855d5641" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1ac726bfaf88914a92a2a2232a855d5641" kindref="member">stack_resize</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>qty)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref><sp/>+=<sp/>qty;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref><sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref><sp/>=<sp/>realloc(stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>,<sp/><ref refid="_config_8h_1a077ed361b17b3331f4506422a383aaae" kindref="member">SIZE_OF_INT</ref><sp/>*<sp/>stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51" refid="_stack_8h_1a9b04b30c135696d611c05092a429e961" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1a9b04b30c135696d611c05092a429e961" kindref="member">stack_get_arbitrary</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>&gt;=<sp/>stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>||<sp/>index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xBAD17;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[index];</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60" refid="_stack_8h_1ae041e1222c96f70d7b1a4528c3b3bf2c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1ae041e1222c96f70d7b1a4528c3b3bf2c" kindref="member">stack_push</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;=<sp/>stack-&gt;<ref refid="struct_stack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_stack_8h_1ac726bfaf88914a92a2a2232a855d5641" kindref="member">stack_resize</ref>(stack,<sp/>1);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>data<sp/>to<sp/>the<sp/>top<sp/>of<sp/>the<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>++]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69" refid="_stack_8h_1a86914bce7c52639297c92a086ba87581" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1a86914bce7c52639297c92a086ba87581" kindref="member">stack_pop</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>--;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_stack_8h_1ac726bfaf88914a92a2a2232a855d5641" kindref="member">stack_resize</ref>(stack,<sp/>-1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77" refid="_stack_8h_1ac5b24a79f9821527a6673b7582ae838b" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1ac5b24a79f9821527a6673b7582ae838b" kindref="member">stack_check</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack-&gt;<ref refid="struct_stack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>];</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82" refid="_stack_8h_1a1f99bec6acb65ce01f2079dc1ea2c117" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1a1f99bec6acb65ce01f2079dc1ea2c117" kindref="member">getsizeof_stack</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="_stack_8h_1ac631668285b65b180672342a757df994" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1ac631668285b65b180672342a757df994" kindref="member">stack_merge</ref>(<ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack1,<sp/><ref refid="struct_stack" kindref="compound">Stack</ref><sp/>*stack2)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack1-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stack1-&gt;<ref refid="struct_stack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_stack_8h_1ae041e1222c96f70d7b1a4528c3b3bf2c" kindref="member">stack_push</ref>(stack2,<sp/><ref refid="_stack_8h_1a86914bce7c52639297c92a086ba87581" kindref="member">stack_pop</ref>(stack1));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_stack_8h_1afc04d6c48f275815a5a248a37b9f30bc" kindref="member">stack_free</ref>(stack1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/include/Stack.h"/>
  </compounddef>
</doxygen>
