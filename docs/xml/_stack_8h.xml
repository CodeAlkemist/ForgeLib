<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="_stack_8h" kind="file" language="C++">
    <compoundname>Stack.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_config_8h" local="yes">Config.h</includes>
    <includedby refid="libforge_8h" local="yes">src/libforge.h</includedby>
    <incdepgraph>
      <node id="29">
        <label>stdlib.h</label>
      </node>
      <node id="30">
        <label>Config.h</label>
        <link refid="_config_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>Consts.h</label>
        <link refid="_consts_8h"/>
      </node>
      <node id="28">
        <label>src/Stack.h</label>
        <link refid="_stack_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32">
        <label>src/Stack.h</label>
        <link refid="_stack_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>src/libforge.h</label>
        <link refid="libforge_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structstack" prot="public">stack</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_stack_8h_1a06c1a54401a1d72a30affd4d321948e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stack_traverse</definition>
        <argsstring>(Stack *stack, int index)</argsstring>
        <name>stack_traverse</name>
        <param>
          <type><ref refid="structstack_1aa7883e8bf747b9dedec990b539df2cc0" kindref="member">Stack</ref> *</type>
          <declname>stack</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Traverse the stack to the desired index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stack</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Stack.h" line="181" column="1" bodyfile="src/Stack.h" bodystart="181" bodyend="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright (c) 2017 Matheus Xavier Silva </para></simplesect>
<simplesect kind="author"><para>Matheus Xavier Silva </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_config_8h" kindref="compound">Config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structstack" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25" refid="structstack_1a2679cd033e6388e644c68ded9ce1fba4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structstack_1a2679cd033e6388e644c68ded9ce1fba4" kindref="member">popc</ref>;</highlight></codeline>
<codeline lineno="31" refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>;</highlight></codeline>
<codeline lineno="36" refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="41" refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>;</highlight></codeline>
<codeline lineno="46" refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="51" refid="structstack_1aa7883e8bf747b9dedec990b539df2cc0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref><sp/><ref refid="structstack" kindref="compound">Stack</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structstack_1aebdb418b70e964383b7b0e2fbedde09e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstack_1aebdb418b70e964383b7b0e2fbedde09e" kindref="member">stack_init</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>size<sp/>and<sp/>capacity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref><sp/>=<sp/><ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a2679cd033e6388e644c68ded9ce1fba4" kindref="member">popc</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref><sp/>=<sp/>malloc(<ref refid="_config_8h_1a077ed361b17b3331f4506422a383aaae" kindref="member">SIZE_OF_INT</ref><sp/>*<sp/>stack-&gt;<ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structstack_1afc04d6c48f275815a5a248a37b9f30bc" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstack_1afc04d6c48f275815a5a248a37b9f30bc" kindref="member">stack_free</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>free(stack);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structstack_1ac04939a837a201ef916b8df6886d939a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstack_1ac04939a837a201ef916b8df6886d939a" kindref="member">stack_resize</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref><sp/>+=<sp/><ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref><sp/>=<sp/>realloc(stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>,<sp/><ref refid="_config_8h_1a077ed361b17b3331f4506422a383aaae" kindref="member">SIZE_OF_INT</ref><sp/>*<sp/>stack-&gt;<ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="structstack_1ae041e1222c96f70d7b1a4528c3b3bf2c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstack_1ae041e1222c96f70d7b1a4528c3b3bf2c" kindref="member">stack_push</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>+<sp/>1)<sp/>&gt;=<sp/>stack-&gt;<ref refid="structstack_1adbe66a087ac3fd4a5b0566f64ca2d12b" kindref="member">capacity</ref>){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstack_1ac04939a837a201ef916b8df6886d939a" kindref="member">stack_resize</ref>(stack,<sp/>1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>++;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>data<sp/>to<sp/>the<sp/>top<sp/>of<sp/>the<sp/>stack<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>++]<sp/>=<sp/><ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structstack_1a86914bce7c52639297c92a086ba87581" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a86914bce7c52639297c92a086ba87581" kindref="member">stack_pop</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack-&gt;<ref refid="structstack_1a2679cd033e6388e644c68ded9ce1fba4" kindref="member">popc</ref>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>--;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>--;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a2679cd033e6388e644c68ded9ce1fba4" kindref="member">popc</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>--;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>--;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="structstack_1ac5b24a79f9821527a6673b7582ae838b" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1ac5b24a79f9821527a6673b7582ae838b" kindref="member">stack_check</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack-&gt;<ref refid="structstack_1ac103627c1ad15cbec2f22d0abe6d54b6" kindref="member">data</ref>[stack-&gt;<ref refid="structstack_1af93f4f37fc2ad9c37af4a715423b110c" kindref="member">top</ref>];</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structstack_1a1f99bec6acb65ce01f2079dc1ea2c117" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a1f99bec6acb65ce01f2079dc1ea2c117" kindref="member">getsizeof_stack</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stack-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structstack_1ac631668285b65b180672342a757df994" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structstack_1ac631668285b65b180672342a757df994" kindref="member">stack_merge</ref>(<ref refid="structstack" kindref="compound">Stack</ref><sp/>*stack1,<sp/><ref refid="structstack" kindref="compound">Stack</ref><sp/>*stack2)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(stack1-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(stack1-&gt;<ref refid="structstack_1a439227feff9d7f55384e8780cfc2eb82" kindref="member">size</ref><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstack_1ae041e1222c96f70d7b1a4528c3b3bf2c" kindref="member">stack_push</ref>(stack2,<sp/><ref refid="structstack_1a86914bce7c52639297c92a086ba87581" kindref="member">stack_pop</ref>(stack1));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structstack_1afc04d6c48f275815a5a248a37b9f30bc" kindref="member">stack_free</ref>(stack1);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="_stack_8h_1a06c1a54401a1d72a30affd4d321948e6" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_stack_8h_1a06c1a54401a1d72a30affd4d321948e6" kindref="member">stack_traverse</ref>(<ref refid="structstack_1aa7883e8bf747b9dedec990b539df2cc0" kindref="member">Stack</ref><sp/>*<ref refid="structstack" kindref="compound">stack</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Stack.h"/>
  </compounddef>
</doxygen>
